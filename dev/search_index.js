var documenterSearchIndex = {"docs":
[{"location":"guide/#Guide","page":"Getting Started","title":"Guide","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"This guide demonstrates the basic capabilities of using VortexLattice.  First, we need to load the package.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using VortexLattice\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Then we need to create our geometry.  While VortexLattice can handle multiple lifting surfaces, for this guide we will be analyzing a planar wing with the following geometric properties.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"xle = [0.0, 0.4] # leading edge x-position\nyle = [0.0, 7.5] # leading edge y-position\nzle = [0.0, 0.0] # leading edge z-position\nchord = [2.2, 1.8] # chord length\ntheta = [2.0*pi/180, 2.0*pi/180] # twist (in radians)\nphi = [0.0, 0.0] # section rotation about the x-axis\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Note that we are only defining half the wing since the wing is symmetric about the y-axis.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We also need to define the number of panels and the discretization scheme in the spanwise and chordwise directions.  There are currently three discretization scheme options: Uniform(), Sine(), and Cosine().  To maximize the accuracy of our analysis we would like to use cosine spacing in the spanwise direction.  To do this, we need to use sine spacing on the right half of the wing (since once reflected across the y-z plane, sine spacing become cosine spacing).  ","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"ns = 12 # number of spanwise panels\nnc = 6  # number of chordwise panels\nspacing_s = Sine() # spanwise discretization scheme\nspacing_c = Uniform() # chordwise discretization scheme\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Now that we have defined our geometry and discretization scheme we can generate the panels using wing_to_horseshoe_vortices or wing_to_vortex_rings.  Using vortex rings allows us to model camber and twist in the panel geometry (rather than just in the boundary conditions), however, since our sections have no camber and only a small amount of twist there is essentially no difference between the results using the two vortex panel types.  ","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"panels = wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc;\n    spacing_s=spacing_s, spacing_c=spacing_c, mirror=true)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Note that we used the keyword argument mirror to create a copy of our geometry, reflected across the X-Z plane.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Now that we have generated our geometry we need to define our reference parameters and freestream properties. We use the following reference parameters","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Sref = 30.0 # reference area\ncref = 2.0  # reference chord\nbref = 15.0 # reference span\nrref = [0.50, 0.0, 0.0] # reference location for rotations/moments (typically the c.g.)\nref = Reference(Sref, cref, bref, rref)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We also use the following flow conditions","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"alpha = 1.0*pi/180 # angle of attack\nbeta = 0.0 # sideslip angle\nOmega = [0.0, 0.0, 0.0] # rotational velocity around the reference location\nfs = Freestream(alpha, beta, Omega)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Since the flow conditions are symmetric, we could have modeled only one half of our wing and declared that the problem was symmetric.  This, however, would give incorrect results the lateral stability derivatives so we have mirrored our geometry across the Y-Z plane instead of using the problem symmetry.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"symmetric = false\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Now that we have all the components necessary for our analysis we can perform the core computation of the vortex lattice method: calculate panel circulation.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"AIC = influence_coefficients(panels, symmetric)\nb = normal_velocity(panels, ref, fs)\nΓ = circulation(AIC, b)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can then use the circulation distribution combined with the Kutta-Joukowski theory to find the forces and moments on the aircraft.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"CF, CM, panelprops = near_field_forces(panels, ref, fs, symmetric, Γ)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"By default CF and CM are returned in the body frame, but we can easily return them in the wind frame using the frame keyword argument.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"CF, CM, panelprops = near_field_forces(panels, ref, fs, symmetric, Γ; frame=Wind())\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Numerical noise often corrupts drag estimates from near-field analyses (such as the previous analysis), therefore, it is often more accurate to compute drag in the farfield on the Trefftz plane.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"CDiff = far_field_drag(panels, ref, fs, symmetric, Γ)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can also compute body or stability derivatives for the aircraft.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"dCFb, dCMb = body_derivatives(panels, ref, fs, symmetric, AIC)\ndCFs, dCMs = stability_derivatives(panels, ref, fs, symmetric, AIC)\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can also visualize our geometry using ParaView.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"write_vtk(\"simplewing\", panels)","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"See the theory document located in the repository for this package and/or the following references:","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"[1] Drela, M. Flight Vehicle Aerodynamics. MIT Press, 2014.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"[2] Katz, J., and Plotkin A. Low-Speed Aerodynamics. Cambridge University Press, 2001.","category":"page"},{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Pages = [\"library.md\"]\nDepth = 3","category":"page"},{"location":"library/#Public-API","page":"Library","title":"Public API","text":"","category":"section"},{"location":"library/#Generating-Lifting-Surfaces","page":"Library","title":"Generating Lifting Surfaces","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"AbstractSpacing\nUniform\nSine\nCosine\ngrid_to_horseshoe_vortices(xyz)\ngrid_to_vortex_rings(xyz)\ngrid_to_horseshoe_vortices(xyz, ns, nc)\ngrid_to_vortex_rings(xyz, ns, nc)\nwing_to_horseshoe_vortices\nwing_to_vortex_rings","category":"page"},{"location":"library/#VortexLattice.AbstractSpacing","page":"Library","title":"VortexLattice.AbstractSpacing","text":"AbstractSpacing\n\nSpacing discretization scheme supertype\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Uniform","page":"Library","title":"VortexLattice.Uniform","text":"Uniform()\n\nUniform discretization scheme\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Sine","page":"Library","title":"VortexLattice.Sine","text":"Sine()\n\nSine-spaced discretization scheme.\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Cosine","page":"Library","title":"VortexLattice.Cosine","text":"Cosine()\n\nCosine-spaced discretization scheme\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.grid_to_horseshoe_vortices-Tuple{Any}","page":"Library","title":"VortexLattice.grid_to_horseshoe_vortices","text":"grid_to_horseshoe_vortices(xyz; mirror=false, fcore=(c, Δs)->max(c/4, Δs))\n\nConstruct a set of horseshoe vortex panels given a potentially curved lifting surface defined by a grid with dimensions (3, i, j) where i corresponds to the chordwise direction (ordered from leading edge to trailing edge) and j corresponds to the spanwise direction (ordered from left to right).  The bound vortex will be placed at the 1/4 chord and the control point will be placed at the 3/4 chord of each panel.\n\nIn order to be consistent with vortex lattice theory using horseshoe vortices, the y and z-coordinates of each resulting chordwise strip of panels are set to the same y and z-coordinates as found at the leading edge of the chordwise strip.  The normal vectors used to satisfy the no-flow boundary conditions, however, are set using the original geometry.\n\nThe optional argument mirror may be used to mirror the geometry across the y-axis.\n\nThe argument fcore defines a function for setting the finite core size based on the chord length in the x-direction and/or the panel width in the y/z directions. The default function is the same as that used by AVL.\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.grid_to_vortex_rings-Tuple{Any}","page":"Library","title":"VortexLattice.grid_to_vortex_rings","text":"grid_to_vortex_rings(xyz; mirror=false, fcore=(c, Δs)->max(c/4, Δs/2))\n\nConstruct a set of vortex ring panels given a potentially curved lifting surface defined by a grid with dimensions (3, i, j) where i corresponds to the chordwise direction (ordered from leading edge to trailing edge) and j corresponds to the spanwise direction (ordered from left to right).  The leading edge of each ring vortex will be placed at the 1/4 chord and the control point will be placed at the 3/4 chord of each panel.\n\nThe optional argument mirror may be used to mirror the geometry across the y-axis.\n\nThe argument fcore defines a function for setting the finite core size based on the chord length in the x-direction and/or the panel width in the y/z directions. The default function is the same as that used by AVL.\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.grid_to_horseshoe_vortices-Tuple{Any,Any,Any}","page":"Library","title":"VortexLattice.grid_to_horseshoe_vortices","text":"grid_to_horseshoe_vortices(xyz, ns, nc; mirror=false,\n    fcore=(c, Δs)->max(c/4, Δs/2), spacing_s=Cosine(), spacing_c=Uniform(),\n    interp_s=(x)->(x,y,xpt)->LinearInterpolation(x, y)(xpt),\n    interp_c=(x,y,xpt)->LinearInterpolation(x, y)(xpt))\n\nDiscretize a potentially curved lifting surface defined by a grid with dimensions (3, i, j) where i corresponds to the chordwise direction (ordered from leading edge to trailing edge) and j corresponds to the spanwise direction (ordered from left to right) into ns spanwise and nc chordwise horseshoe vortex panels according to the spanwise discretization scheme spacing_s and chordwise discretization scheme spacing_c.  The bound vortex will be placed at the 1/4 chord and the control point will be placed at the 3/4 chord of each panel.\n\nIn order to be consistent with vortex lattice theory using horseshoe vortices, the y and z-coordinates of each resulting chordwise strip of panels are set to the same y and z-coordinates as found at the leading edge of the chordwise strip.  The normal vectors used to satisfy the no-flow boundary conditions, however, are set using the original geometry.\n\nArguments\n\nxyz: grid of dimensions (3, i, j) where where i corresponds to the  chordwise direction and j corresponds to the spanwise direction.\nns: number of spanwise panels\nnc: number of chordwise panels\nmirror:  mirror the geometry across the y-axis? defaults to false.\nfcore: function for setting the finite core size based on the chord length      (in the x-direction) and/or the panel width (in the y/z directions).      Defaults to (c, Δs)->max(c/4, Δs/2) (which corresponds to AVL's implementation)\nspacing_s: spanwise discretization scheme, defaults to Cosine()\nspacing_c: chordwise discretization scheme, defaults to Uniform()\ninterp_s: spanwise interpolation function, defaults to linear interpolation\ninterp_c: chordwise interpolation function, defaults to linear interpolation\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.grid_to_vortex_rings-Tuple{Any,Any,Any}","page":"Library","title":"VortexLattice.grid_to_vortex_rings","text":"grid_to_vortex_rings(xyz, ns, nc; mirror=false, fcore=(c, Δs)->max(c/4, Δs/2),\n    spacing_s=Cosine(), spacing_c=Uniform(),\n    interp_s=(x,y,xpt)->LinearInterpolation(x, y)(xpt),\n    interp_c=(x,y,xpt)->LinearInterpolation(x, y)(xpt))\n\nDiscretize a potentially curved lifting surface defined by a grid with dimensions (3, i, j) where i corresponds to the chordwise direction (ordered from leading edge to trailing edge) and j corresponds to the spanwise direction (ordered from left to right) into ns spanwise and nc chordwise vortex ring panels according to the spanwise discretization scheme spacing_s and chordwise discretization scheme spacing_c.  The bound vortex will be placed at the 1/4 chord and the control point will be placed at the 3/4 chord of each panel\n\nArguments\n\nxyz: grid of dimensions (3, i, j) where where i corresponds to the  chordwise direction and j corresponds to the spanwise direction.\nns: number of spanwise panels\nnc: number of chordwise panels\nmirror:  mirror the geometry across the y-axis? defaults to false.\nfcore: function for setting the finite core size based on the chord length      (in the x-direction) and/or the panel width (in the y/z directions).      Defaults to (c, Δs)->max(c/4, Δs/2) (which corresponds to AVL's implementation)\nspacing_s: spanwise discretization scheme, defaults to Cosine()\nspacing_c: chordwise discretization scheme, defaults to Uniform()\ninterp_s: spanwise interpolation function, defaults to linear interpolation\ninterp_c: chordwise interpolation function, defaults to linear interpolation\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.wing_to_horseshoe_vortices","page":"Library","title":"VortexLattice.wing_to_horseshoe_vortices","text":"wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc;\n    fc=fill(x->0, length(xle)), mirror=false, fcore=(c, Δs)->max(c/4, Δs/2),\n    spacing_s=Cosine(), spacing_c=Uniform(), interp_s=(x,y,xpt)->LinearInterpolation(x, y)(xpt))\n\nDiscretize a wing into ns spanwise and nc chordwise horseshoe vortex panels according to the spanwise discretization scheme spacing_s and chordwise discretization scheme spacing_c.\n\nArguments\n\nxle: leading edge x-coordinate of each airfoil section\nyle: leading edge y-coordinate of each airfoil section\nzle: leading edge z-coordinate of each airfoil section\nchord: chord length of each airfoil section\ntheta: twist of each airfoil section\nphi: dihedral angle of each airfoil section, defined by a right hand rotation about the x-axis\nns: number of spanwise panels\nnc: number of chordwise panels\nfc: (optional) camber line function y=f(x) of each airfoil section\nmirror:  mirror the geometry across the y-axis?, defaults to false\nfcore: function for setting the finite core size based on the chord length      (in the x-direction) and/or the panel width (in the y/z directions).      Defaults to (c, Δs)->max(c/4, Δs/2) (which corresponds to AVL's implementation)\nspacing_s: spanwise discretization scheme, defaults to Cosine()\nspacing_c: chordwise discretization scheme, defaults to Uniform()\ninterp_s: interpolation function between spanwise stations, defaults to linear interpolation\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.wing_to_vortex_rings","page":"Library","title":"VortexLattice.wing_to_vortex_rings","text":"wing_to_vortex_rings(xle, yle, zle, chord, theta, phi, ns, nc;\n    fc=fill(x->0, length(xle)), mirror=false,\n    fcore=(c, Δs)->max(c/4, Δs/2), spacing_s=Cosine(), spacing_c=Uniform(),\n    interp_s=(x,y,xpt)->LinearInterpolation(x, y)(xpt))\n\nDiscretize a wing into ns spanwise and nc chordwise vortex ring panels according to the spanwise discretization scheme spacing_s and chordwise discretization scheme spacing_c.\n\nArguments\n\nxle: leading edge x-coordinate of each airfoil section\nyle: leading edge y-coordinate of each airfoil section\nzle: leading edge z-coordinate of each airfoil section\nchord: chord length of each airfoil section\ntheta: twist of each airfoil section\nphi: dihedral angle of each airfoil section, defined by a right hand rotation about the x-axis\nns: number of spanwise panels\nnc: number of chordwise panels\nfc: (optional) camber line function y=f(x) of each airfoil section\nmirror:  mirror the geometry across the y-axis?, defaults to false\nfcore: function for setting the finite core size based on the chord length      (in the x-direction) and/or the panel width (in the y/z directions).      Defaults to (c, Δs)->max(c/4, Δs/2) (which corresponds to AVL's implementation)\nspacing_s: spanwise discretization scheme, defaults to Cosine()\nspacing_c: chordwise discretization scheme, defaults to Uniform()\ninterp_s: interpolation function between spanwise stations, defaults to linear interpolation\n\n\n\n\n\n","category":"function"},{"location":"library/#Manipulating-Lifting-Surfaces","page":"Library","title":"Manipulating Lifting Surfaces","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"AbstractPanel\nHorseshoe\nRing\ntranslate(panels::AbstractVector{<:AbstractPanel}, r)\ntranslate!(panels, r)\nreflect(panels::AbstractMatrix{<:AbstractPanel})","category":"page"},{"location":"library/#VortexLattice.AbstractPanel","page":"Library","title":"VortexLattice.AbstractPanel","text":"AbstractPanel{TF}\n\nSupertype of vortex lattice method panel types.\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Horseshoe","page":"Library","title":"VortexLattice.Horseshoe","text":"Horseshoe{TF}\n\nHorseshoe shaped panel element with trailing vortices that extend in the +x direction to the trailing edge, and then into the farfield.\n\nFields\n\nrl: position of the left side of the bound vortex\nrc: position of the center of the bound vortex\nrr: position of the right side of the bound vortex\nrcp: position of the panel control point\nncp: normal vector at the panel control point\nxl_te: x-distance from the left side of the bound vortex to the trailing edge\nxc_te: x-distance from the center of the bound vortex to the trailing edge\nxr_te: x-distance from the right side of the bound vortex to the trailing edge\ncore_size: finite core size\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Ring","page":"Library","title":"VortexLattice.Ring","text":"Ring{TF}\n\nVortex ring shaped panel element.\n\nFields\n\nrtl: position of the left side of the top bound vortex\nrtc: position of the center of the top bound vortex\nrtr: position of the right side of the top bound vortex\nrbl: position of the left side of the bottom bound vortex\nrbc: position of the center of the bottom bound vortex\nrbr: position of the right side of the bottom bound vortex\nrcp: position of the panel control point\nncp: normal vector at the panel control point\ncore_size: finite core size\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.translate-Tuple{AbstractArray{var\"#s11\",1} where var\"#s11\"<:AbstractPanel,Any}","page":"Library","title":"VortexLattice.translate","text":"translate(panels::AbstractVector{<:AbstractPanel}, r)\n\nReturn a copy of panels translated the distance specified by vector r\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.translate!-Tuple{Any,Any}","page":"Library","title":"VortexLattice.translate!","text":"translate!(panels, r)\n\nTranslate the panels contained in panels the distance specified by vector r\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.reflect-Tuple{AbstractArray{var\"#s11\",2} where var\"#s11\"<:AbstractPanel}","page":"Library","title":"VortexLattice.reflect","text":"reflect(panels::AbstractMatrix{<:AbstractPanel})\n\nReflects panels about the y-axis, preserving panel grid-based ordering\n\n\n\n\n\n","category":"method"},{"location":"library/#Reference-Parameters-and-Frames","page":"Library","title":"Reference Parameters and Frames","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Reference","category":"page"},{"location":"library/#VortexLattice.Reference","page":"Library","title":"VortexLattice.Reference","text":"Reference(S, c, b, r)\n\nReference quantities.\n\nArguments\n\nS: reference area\nc: reference chord\nb: reference span\nr: reference location for all rotations/moments\n\n\n\n\n\n","category":"type"},{"location":"library/#Freestream-Parameters","page":"Library","title":"Freestream Parameters","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Freestream\nbody_to_stability\nbody_to_wind\nstability_to_body\nstability_to_wind\nwind_to_body\nwind_to_stability","category":"page"},{"location":"library/#VortexLattice.Freestream","page":"Library","title":"VortexLattice.Freestream","text":"Freestream(alpha, beta, Omega, additional_velocity=nothing)\n\nDefine the freestream properties.\n\nArguments\n\nalpha: angle of attack (rad)\nbeta: sideslip angle (rad)\nOmega: rotation vector (p, q, r) of the body frame about the center of   gravity, normalized by Vinf\nadditional_velocity: a function of the form: V = additional_velocity(r) which returns   the additional velocity V (normalized by the freestream velocity) at   position r.  Defaults to nothing.\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.body_to_stability","page":"Library","title":"VortexLattice.body_to_stability","text":"body_to_stability(fs::Freestream)\n\nConstruct a rotation matrix from the body axis to the stability axis.\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.body_to_wind","page":"Library","title":"VortexLattice.body_to_wind","text":"body_to_wind(fs::Freestream)\n\nConstruct a rotation matrix from the body axis to the wind axis\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.stability_to_body","page":"Library","title":"VortexLattice.stability_to_body","text":"stability_to_body(fs::Freestream)\n\nConstruct a rotation matrix from the stability axis to the body axis\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.stability_to_wind","page":"Library","title":"VortexLattice.stability_to_wind","text":"stability_to_wind(fs::Freestream)\n\nConstruct a rotation matrix from the stability axis to the wind axis\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.wind_to_body","page":"Library","title":"VortexLattice.wind_to_body","text":"wind_to_body(fs::Freestream)\n\nConstruct a rotation matrix from the wind axis to the body axis\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.wind_to_stability","page":"Library","title":"VortexLattice.wind_to_stability","text":"wind_to_stability(fs::Freestream)\n\nConstruct a rotation matrix from the wind axis to the stability axis\n\n\n\n\n\n","category":"function"},{"location":"library/#Solving-for-Circulation","page":"Library","title":"Solving for Circulation","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"influence_coefficients(surface::AbstractMatrix, symmetric; xhat=SVector(1, 0, 0))\ninfluence_coefficients(surfaces::AbstractVector{<:AbstractMatrix},\n    surface_id, symmetric; xhat=SVector(1, 0, 0))\ninfluence_coefficients!(AIC, surface::AbstractMatrix, symmetric; xhat=SVector(1, 0, 0))\ninfluence_coefficients!(AIC, surfaces::AbstractVector{<:AbstractMatrix},\n    surface_id, symmetric; xhat=SVector(1, 0, 0))\nnormal_velocity\nnormal_velocity!\ncirculation","category":"page"},{"location":"library/#VortexLattice.influence_coefficients-Tuple{AbstractArray{T,2} where T,Any}","page":"Library","title":"VortexLattice.influence_coefficients","text":"influence_coefficients(surface, symmetric; kwargs...)\n\nConstruct the aerodynamic influence coefficient matrix for a single surface.\n\nArguments:\n\nsurface: Matrix of panels of shape (nc, ns) where nc is the number of  chordwise panels and ns is the number of spanwise panels\nsymmetric: Flag indicating whether a mirror image of the panels in surface  should be used when calculating induced velocities.\nxhat: (optional) direction in which trailing vortices are shed, defaults to [1, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.influence_coefficients-Tuple{AbstractArray{var\"#s11\",1} where var\"#s11\"<:(AbstractArray{T,2} where T),Any,Any}","page":"Library","title":"VortexLattice.influence_coefficients","text":"influence_coefficients(surfaces, surface_id, symmetric; kwargs...)\n\nConstruct the aerodynamic influence coefficient matrix for multiple surfaces.\n\nArguments:\n\nsurface: Vector of surfaces, represented by matrices of panels of shape  (nc, ns) where nc is the number of chordwise panels and ns is the number  of spanwise panels\nsurface_id: ID for each surface.  May be used to deactivate the finite core  model by setting all surface ID's to the same value.\nsymmetric: Flag indicating whether a mirror image of the panels in surface  should be used when calculating induced velocities.\nxhat: (optional) direction in which trailing vortices are shed, defaults to [1, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.influence_coefficients!-Tuple{Any,AbstractArray{T,2} where T,Any}","page":"Library","title":"VortexLattice.influence_coefficients!","text":"influence_coefficients!(AIC, surface, symmetric; kwargs...)\n\nPre-allocated version of influence_coefficients\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.influence_coefficients!-Tuple{Any,AbstractArray{var\"#s11\",1} where var\"#s11\"<:(AbstractArray{T,2} where T),Any,Any}","page":"Library","title":"VortexLattice.influence_coefficients!","text":"influence_coefficients!(AIC, surfaces, surface_id, symmetric; kwargs...)\n\nPre-allocated version of influence_coefficients\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.normal_velocity","page":"Library","title":"VortexLattice.normal_velocity","text":"normal_velocity(surface[s], ref, fs)\n\nCompute the normal component of the external velocity for a single surface or for a vector of surfaces.\n\nThis forms the right hand side of the circulation linear system solve.\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.normal_velocity!","page":"Library","title":"VortexLattice.normal_velocity!","text":"normal_velocity!(b, surface[s], ref, fs)\n\nNon-allocating version of normal_velocity\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.circulation","page":"Library","title":"VortexLattice.circulation","text":"circulation(AIC, b)\n\nSolve for the circulation distribution.\n\n\n\n\n\n","category":"function"},{"location":"library/#Near-Field-Forces-and-Moments","page":"Library","title":"Near Field Forces and Moments","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"AbstractFrame\nBody\nStability\nWind\nPanelProperties\nnear_field_forces(surface::AbstractMatrix, ref, fs, symmetric, Γ)\nnear_field_forces(surfaces::AbstractVector{<:AbstractMatrix}, surface_id, ref, fs, symmetric, Γ)","category":"page"},{"location":"library/#VortexLattice.AbstractFrame","page":"Library","title":"VortexLattice.AbstractFrame","text":"AbstractFrame\n\nSupertype for the different possible reference frames used by this package.\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Body","page":"Library","title":"VortexLattice.Body","text":"Body <: AbstractFrame\n\nReference frame aligned with the global X-Y-Z axes\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Stability","page":"Library","title":"VortexLattice.Stability","text":"Stability <: AbstractFrame\n\nReference frame rotated from the body frame about the y-axis to be aligned with the freestream alpha.\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.Wind","page":"Library","title":"VortexLattice.Wind","text":"Wind <: AbstractFrame\n\nReference frame rotated to be aligned with the freestream alpha and beta\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.PanelProperties","page":"Library","title":"VortexLattice.PanelProperties","text":"PanelProperties\n\nPanel specific properties calculated during the vortex lattice method analysis.\n\nFields\n\ngamma: Panel circulation strength (normalized by the freestream velocity)\nv: Local velocity at the panel's center (typically the quarter-chord), normalized\ncf: Bound vortex force per unit length, normalized by QINF*S where QINF  is the dynamic pressure and S is the user-provided reference area.\ncfl: Left vortex force per unit length, normalized by QINF*S\ncfr: Right vortex force per unit length, normalized by QINF*S\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.near_field_forces-Tuple{AbstractArray{T,2} where T,Any,Any,Any,Any}","page":"Library","title":"VortexLattice.near_field_forces","text":"near_field_forces(surface, reference, freestream, symmetric, Γ; kwargs...)\n\nCompute the forces and moments acting on the aircraft given the circulation distribution Γ.\n\nReturn CF, CM, and a vector of panel properties of type PanelProperties.\n\nArguments:\n\nsurface: Matrix of panels of shape (nc, ns) where nc is the number of  chordwise panels and ns is the number of spanwise panels\nreference: reference parameters (see Reference)\nfreestream: freestream parameters (see Freestream)\nsymmetric: Flag indicating whether a mirror image of the panels in surface  should be used when calculating induced velocities.\nΓ: Vector of circulation strengths for each panel, calculated by circulation\nxhat: (optional) direction in which trailing vortices are shed, defaults to [1, 0, 0]\nframe: frame in which to return CF and CM, options are Body() (default),  Stability(), and Wind()\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.near_field_forces-Tuple{AbstractArray{var\"#s11\",1} where var\"#s11\"<:(AbstractArray{T,2} where T),Any,Any,Any,Any,Any}","page":"Library","title":"VortexLattice.near_field_forces","text":"near_field_forces(surfaces, surface_id, reference, freestream, symmetric, Γ; kwargs...)\n\nCompute the forces and moments acting on the aircraft given the circulation distribution Γ.\n\nReturn CF, CM, and a vector of panel properties of type PanelProperties.\n\nArguments:\n\nsurface: Vector of surfaces, represented by matrices of panels of shape  (nc, ns) where nc is the number of chordwise panels and ns is the number  of spanwise panels\nsurface_id: ID for each surface.  May be used to deactivate the finite core  model by setting all surface ID's to the same value.\nreference: reference parameters (see Reference)\nfreestream: freestream parameters (see Freestream)\nsymmetric: Flag indicating whether a mirror image of the panels in surface  should be used when calculating induced velocities.\nΓ: Vector of circulation strengths for each panel, calculated by circulation\nxhat: (optional) direction in which trailing vortices are shed, defaults to [1, 0, 0]\nframe: frame in which to return CF and CM, options are Body() (default),  Stability(), and Wind()\n\n\n\n\n\n","category":"method"},{"location":"library/#Far-Field-Drag","page":"Library","title":"Far Field Drag","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"far_field_drag","category":"page"},{"location":"library/#VortexLattice.far_field_drag","page":"Library","title":"VortexLattice.far_field_drag","text":"far_field_drag(surface[s], ref, fs, symmetric, Γ)\n\nComputes induced drag using the Trefftz plane (far field method).\n\n\n\n\n\n","category":"function"},{"location":"library/#Body-and-Stability-Derivatives","page":"Library","title":"Body and Stability Derivatives","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"body_derivatives\nstability_derivatives","category":"page"},{"location":"library/#VortexLattice.body_derivatives","page":"Library","title":"VortexLattice.body_derivatives","text":"body_derivatives(panels, ref, fs, symmetric, AIC; xhat=[1,0,0])\n\nReturns the derivatives of the body forces and moments with respect to the freestream velocity components (u, v, w) and the angular velocity components (p, q, r) in the body frame.\n\nThe derivatives are returned as two named tuples: dCF, dCM\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.stability_derivatives","page":"Library","title":"VortexLattice.stability_derivatives","text":"stability_derivatives(panels, ref, fs, symmetric, AIC; xhat=[1,0,0])\n\nReturns the derivatives of the body forces and moments in the stability frame with respect to the freestream velocity components (alpha, beta) and the angular velocity components (p, q, r) in the stability frame.\n\nThe derivatives are returned as two named tuples: dCF, dCM\n\n\n\n\n\n","category":"function"},{"location":"library/#Visualization","page":"Library","title":"Visualization","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"write_vtk","category":"page"},{"location":"library/#VortexLattice.write_vtk","page":"Library","title":"VortexLattice.write_vtk","text":"write_vtk(name, panels::AbstractVector{<:Horseshoe}; kwargs...)\n\nWrites the geometry to Paraview files for visualization.\n\nKeyword Arguments:\n\nxhat=[1, 0, 0]: direction in which trailing vortices are shed\nmirror=false: creates a mirror image of the geometry across the X-Z axis\nwake_length=10: distance to extend the trailing vortices\nmetadata=Dict(): dictionary of metadata to include in generated files\n\n\n\n\n\n","category":"function"},{"location":"library/#Private-API","page":"Library","title":"Private API","text":"","category":"section"},{"location":"library/#Geometry","page":"Library","title":"Geometry","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"VortexLattice.linearinterp\nVortexLattice.spanwise_spacing\nVortexLattice.chordwise_spacing\nVortexLattice.interpolate_grid","category":"page"},{"location":"library/#VortexLattice.linearinterp","page":"Library","title":"VortexLattice.linearinterp","text":"linearinterp(eta, rstart, rend)\n\nLinearly interpolate between rstart and rend where eta is the fraction between 0 (rstart) and 1 (rend)\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.spanwise_spacing","page":"Library","title":"VortexLattice.spanwise_spacing","text":"spanwise_spacing(n, spacing::AbstractSpacing)\n\nDistribute n panel endpoints and n-1 panel midpoints on the interval between 0 and 1 according to the discretization strategy in spacing.\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.chordwise_spacing","page":"Library","title":"VortexLattice.chordwise_spacing","text":"spanwise_spacing(n, spacing::AbstractSpacing)\n\nDistribute n-1 vortex and n-1 control point chordwise locations on the interval between 0 and 1 according to the discretization strategy in spacing.\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.interpolate_grid","page":"Library","title":"VortexLattice.interpolate_grid","text":"interpolate_grid(xyz, eta, interp; xdir=0, ydir=1)\n\nInterpolates the grid xyz along direction dir\n\nArguments\n\nxyz: Grid of size (3, ni, nj)\neta: New (normalized) coordinates in direction dir (0 <= eta <= 1)\ninterp: Interpolation method of form ypt = f(x,y,xpt)\nxdir: Independent variable direction, defaults to arc length\nydir: Dependent variable direction xyz (i=1, j=2)\n\n\n\n\n\n","category":"function"},{"location":"library/#Vortex-Lattice-Panels","page":"Library","title":"Vortex Lattice Panels","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"VortexLattice.top_left\nVortexLattice.top_center\nVortexLattice.top_right\nVortexLattice.bottom_left\nVortexLattice.bottom_center\nVortexLattice.bottom_right\nVortexLattice.controlpoint\nVortexLattice.normal\nVortexLattice.get_core_size\nVortexLattice.translate(panel::AbstractPanel, r)\nVortexLattice.reflect(panel::AbstractPanel)\nVortexLattice.induced_velocity\nVortexLattice.panel_induced_velocity\nVortexLattice.panel_circulation\nVortexLattice.influence_coefficients!(AIC, receiving::AbstractMatrix{<:AbstractPanel}, sending::AbstractMatrix{<:AbstractPanel}, same_id, symmetric, xhat)\nVortexLattice.left_center\nVortexLattice.right_center\nVortexLattice.top_vector\nVortexLattice.left_vector\nVortexLattice.right_vector\nVortexLattice.bottom_vector\nVortexLattice.flipy\nVortexLattice.not_on_symmetry_plane\nVortexLattice.trailing_induced_velocity\nVortexLattice.bound_induced_velocity","category":"page"},{"location":"library/#VortexLattice.top_left","page":"Library","title":"VortexLattice.top_left","text":"top_left(panel::AbstractPanel)\n\nReturn the top left vertex of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.top_center","page":"Library","title":"VortexLattice.top_center","text":"top_center(panel::AbstractPanel)\n\nReturn the top center vertex of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.top_right","page":"Library","title":"VortexLattice.top_right","text":"top_right(panel::AbstractPanel)\n\nReturn the top right vertex of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.bottom_left","page":"Library","title":"VortexLattice.bottom_left","text":"bottom_left(panel::AbstractPanel)\n\nReturn the bottom left vertex of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.bottom_center","page":"Library","title":"VortexLattice.bottom_center","text":"bottom_center(panel::AbstractPanel)\n\nReturn the bottom center vertex of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.bottom_right","page":"Library","title":"VortexLattice.bottom_right","text":"bottom_right(panel::AbstractPanel)\n\nReturn the bottom right vertex of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.controlpoint","page":"Library","title":"VortexLattice.controlpoint","text":"controlpoint(panel::AbstractPanel)\n\nReturn the control point of panel (typically located at the 3/4 chord)\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.normal","page":"Library","title":"VortexLattice.normal","text":"normal(panel::AbstractPanel)\n\nReturn the normal vector of panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.get_core_size","page":"Library","title":"VortexLattice.get_core_size","text":"get_core_size(panel::AbstractPanel)\n\nReturn the panel core size\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.translate-Tuple{AbstractPanel,Any}","page":"Library","title":"VortexLattice.translate","text":"translate(panel::AbstractPanel, r)\n\nReturn a copy of panel translated the distance specified by vector r\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.reflect-Tuple{AbstractPanel}","page":"Library","title":"VortexLattice.reflect","text":"reflect(panel::AbstractPanel)\n\nReflects a panel across the y-axis.\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.induced_velocity","page":"Library","title":"VortexLattice.induced_velocity","text":"induced_velocity(rcp, panel, same_id, symmetric, xhat, args...)\n\nComputes the normalized induced velocity at control point rcp from panel.\n\nArguments\n\nrcp: Control point for receiving panel\npanel: Sending panel\nsame_id: Flag indicating whether the sending and receiving surfaces have the same surface ID\nsymmetric: Flag indicating whether sending panel should be mirrored across the y-axis\nxhat: Direction in which to shed trailing vortices\n\nOptional Arguments for Horseshoe Vortices\n\ninclude_bound: Indicates whether to include the bound vortex in induced velocity  calculations, defaults to true\n\nOptional Arguments for Vortex Rings\n\ntrailing: Flag indicating whether sending panel sheds trailing vortices\ninclude_top: Indicates whether to include the top bound vortex in induced velocity  calculations, defaults to true\ninclude_bottom: Indicates whether to include the bottom bound vortex in induced velocity  calculations, defaults to true\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.panel_induced_velocity","page":"Library","title":"VortexLattice.panel_induced_velocity","text":"panel_induced_velocity(receiving, Ir, sending, Is, same_surface, same_id, symmetric, xhat, trailing)\n\nComputes the normalized induced velocity on panel receiving from panel sending.\n\nArguments\n\nreceiving: Receiving panel\nIr: Indices of receiving panel\nsending: Sending panel\nIs: Indices of sending panel\nsame_surface: Flag indicating whether the sending and receiving surfaces are the same\nsame_id: Flag indicating whether the sending and receiving surfaces have the same surface ID\nsymmetric: Flag indicating whether sending panel should be mirrored across the y-axis\nxhat: Direction in which to shed trailing vortices\ntrailing: Indicates whether the panel is on the trailing edge\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.panel_circulation","page":"Library","title":"VortexLattice.panel_circulation","text":"panel_circulation(panel, Γ1, Γ2)\n\nReturn the circulation on panel given the circulation strength of the previous bound vortex Γ1 and the current bound vortex Γ2\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.influence_coefficients!-Tuple{Any,AbstractArray{var\"#s11\",2} where var\"#s11\"<:AbstractPanel,AbstractArray{var\"#s10\",2} where var\"#s10\"<:AbstractPanel,Any,Any,Any}","page":"Library","title":"VortexLattice.influence_coefficients!","text":"influence_coefficients!(AIC, receiving::AbstractMatrix{<:AbstractPanel},\n    sending::AbstractMatrix{<:AbstractPanel}, same_id, symmetric, xhat)\n\nCompute the AIC coefficients corresponding to the influence of the panels in sending on the panels in receiving.\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.left_center","page":"Library","title":"VortexLattice.left_center","text":"left_center(panel::AbstractPanel)\n\nReturn the center of the left bound vortex on panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.right_center","page":"Library","title":"VortexLattice.right_center","text":"right_center(panel::AbstractPanel)\n\nReturn the center of the right bound vortex on panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.top_vector","page":"Library","title":"VortexLattice.top_vector","text":"top_vector(panel::AbstractPanel)\n\nReturns the path of the top bound vortex for panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.left_vector","page":"Library","title":"VortexLattice.left_vector","text":"left_vector(panel)\n\nReturn the path of the left bound vortex for panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.right_vector","page":"Library","title":"VortexLattice.right_vector","text":"right_vector(panel)\n\nReturn the path of the right bound vortex for panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.bottom_vector","page":"Library","title":"VortexLattice.bottom_vector","text":"bottom_vector(panel)\n\nReturn the path of the bottom bound vortex for panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.flipy","page":"Library","title":"VortexLattice.flipy","text":"flipy(r)\n\nFlip sign of y-component of vector r (used for symmetry)\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.not_on_symmetry_plane","page":"Library","title":"VortexLattice.not_on_symmetry_plane","text":"not_on_symmetry_plane(r1, r2, tol=eps())\n\nTest whether points r1 and r2 are on the symmetry plane (y = 0)\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.trailing_induced_velocity","page":"Library","title":"VortexLattice.trailing_induced_velocity","text":"trailing_induced_velocity(r1, r2, xhat, same_id, core_size)\n\nCompute the induced velocity (per unit circulation) for two vortices trailing in the xhat direction, at a control point located at r1 relative to the start of the left trailing vortex and r2 relative to the start of the right trailing vortex.\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.bound_induced_velocity","page":"Library","title":"VortexLattice.bound_induced_velocity","text":"bound_induced_velocity(r1, r2, same_id, core_size)\n\nCompute the induced velocity (per unit circulation) for a bound vortex, at a control point located at r1 relative to the start of the bound vortex and r2 relative to the end of the bound vortex\n\n\n\n\n\n","category":"function"},{"location":"library/#Freestream","page":"Library","title":"Freestream","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"VortexLattice.body_to_stability_alpha\nVortexLattice.body_to_wind_derivatives\nVortexLattice.stability_to_body_alpha\nVortexLattice.stability_to_wind_beta\nVortexLattice.wind_to_body_derivatives\nVortexLattice.wind_to_stability_beta\nVortexLattice.freestream_velocity\nVortexLattice.freestream_velocity_derivatives\nVortexLattice.external_velocity\nVortexLattice.external_velocity_derivatives","category":"page"},{"location":"library/#VortexLattice.body_to_stability_alpha","page":"Library","title":"VortexLattice.body_to_stability_alpha","text":"body_to_stability_alpha(fs::Freestream)\n\nConstruct a rotation matrix from the body axis to the stability axis and its derivative with respect to alpha\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.body_to_wind_derivatives","page":"Library","title":"VortexLattice.body_to_wind_derivatives","text":"body_to_wind_derivatives(fs::Freestream)\n\nConstruct a rotation matrix from the body axis to the wind axis and its derivatives with respect to alpha and beta\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.stability_to_body_alpha","page":"Library","title":"VortexLattice.stability_to_body_alpha","text":"stability_to_body(fs::Freestream)\n\nConstruct a rotation matrix from the stability axis to the body axis and its derivative with respect to alpha\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.stability_to_wind_beta","page":"Library","title":"VortexLattice.stability_to_wind_beta","text":"stability_to_wind_beta(fs::Freestream)\n\nConstruct a rotation matrix from the stability axis to the wind axis and its derivative with respect to beta\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.wind_to_body_derivatives","page":"Library","title":"VortexLattice.wind_to_body_derivatives","text":"wind_to_body_derivatives(fs::Freestream)\n\nConstruct a rotation matrix from the wind axis to the body axis and its derivatives with respect to alpha and beta\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.wind_to_stability_beta","page":"Library","title":"VortexLattice.wind_to_stability_beta","text":"wind_to_stability_beta(fs::Freestream)\n\nConstruct a rotation matrix from the wind axis to the stability axis and its derivative with respect to beta\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.freestream_velocity","page":"Library","title":"VortexLattice.freestream_velocity","text":"freestream_velocity(freestream)\n\nComputes the freestream velocity\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.freestream_velocity_derivatives","page":"Library","title":"VortexLattice.freestream_velocity_derivatives","text":"freestream_velocity_derivatives(freestream)\n\nComputes the freestream velocity\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.external_velocity","page":"Library","title":"VortexLattice.external_velocity","text":"external_velocity(freestream, r, rref)\n\nCompute the external velocity at location r\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.external_velocity_derivatives","page":"Library","title":"VortexLattice.external_velocity_derivatives","text":"external_velocity_derivatives(freestream, r, rref)\n\nCompute the external velocity at location r and its derivatives with respect to (alpha, beta, p, q, r)\n\n\n\n\n\n","category":"function"},{"location":"library/#Circulation","page":"Library","title":"Circulation","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"VortexLattice.normal_velocity_derivatives\nVortexLattice.normal_velocity_derivatives!\nVortexLattice.circulation_derivatives","category":"page"},{"location":"library/#VortexLattice.normal_velocity_derivatives","page":"Library","title":"VortexLattice.normal_velocity_derivatives","text":"normal_velocity_derivatives(surface[s], ref, fs)\n\nCompute the normal component of the external velocity for a single surface or for a vector of surfaces and its derivatives with respect to (alpha, beta, p, q, r).\n\nThis forms the right hand side of the circulation linear system solve (and its derivatives).\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.normal_velocity_derivatives!","page":"Library","title":"VortexLattice.normal_velocity_derivatives!","text":"normal_velocity_derivatives!(b, db, surface[s], ref, fs)\n\nNon-allocating version of normal_velocity_derivatives\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.circulation_derivatives","page":"Library","title":"VortexLattice.circulation_derivatives","text":"circulation_derivatives(AIC, b, db)\n\nSolve for the circulation distribution and its derivatives with respect to (alpha, beta, p, q, r)    .\n\n\n\n\n\n","category":"function"},{"location":"library/#Near-Field","page":"Library","title":"Near-Field","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"VortexLattice.body_to_frame\nVortexLattice.near_field_forces_derivatives(surface::AbstractMatrix, ref, fs, symmetric, Γ, dΓ)\nVortexLattice.near_field_forces_derivatives(surfaces::AbstractVector{<:AbstractMatrix}, surface_id, ref, fs, symmetric, Γ, dΓ)","category":"page"},{"location":"library/#VortexLattice.body_to_frame","page":"Library","title":"VortexLattice.body_to_frame","text":"body_to_frame(CF, CM, ref, fs, frame)\n\nTransforms the coefficients CF and CM which are provided in the body frame to another frame\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.near_field_forces_derivatives-Tuple{AbstractArray{T,2} where T,Any,Any,Any,Any,Any}","page":"Library","title":"VortexLattice.near_field_forces_derivatives","text":"near_field_forces_derivatives(surface, reference, freestream, symmetric, Γ, dΓ; kwargs...)\n\nCompute the forces and moments acting on the aircraft given the circulation distribution Γ and their derivatives with respect to the variables in freestream.\n\nReturn CF, CM, dCF, dCM, and a vector of panel properties of type PanelProperties. CF, CM, dCF, and dCM are returned in the body frame.\n\nArguments:\n\nsurface: Matrix of panels of shape (nc, ns) where nc is the number of  chordwise panels and ns is the number of spanwise panels\nreference: reference parameters (see Reference)\nfreestream: freestream parameters (see Freestream)\nsymmetric: Flag indicating whether a mirror image of the panels in surface  should be used when calculating induced velocities.\nΓ: Vector of circulation strengths for each panel\ndΓ: Tuple containing the derivative of the circulation strength with respect  to each of the freestream parameters\nxhat: (optional) direction in which trailing vortices are shed, defaults to [1, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.near_field_forces_derivatives-Tuple{AbstractArray{var\"#s11\",1} where var\"#s11\"<:(AbstractArray{T,2} where T),Any,Any,Any,Any,Any,Any}","page":"Library","title":"VortexLattice.near_field_forces_derivatives","text":"near_field_forces_derivatives(surfaces, surface_id, reference, freestream, symmetric, Γ; kwargs...)\n\nCompute the forces and moments acting on the aircraft given the circulation distribution Γ and their derivatives with respect to the variables in freestream.\n\nReturn CF, CM, dCF, dCM, and a vector of panel properties of type PanelProperties. CF, CM, dCF, and dCM are returned in the body frame.\n\nArguments:\n\nsurface: Vector of surfaces, represented by matrices of panels of shape  (nc, ns) where nc is the number of chordwise panels and ns is the number  of spanwise panels\nsurface_id: ID for each surface.  May be used to deactivate the finite core  model by setting all surface ID's to the same value.\nreference: reference parameters (see Reference)\nfreestream: freestream parameters (see Freestream)\nsymmetric: Flag indicating whether a mirror image of the panels in surface  should be used when calculating induced velocities.\nΓ: Vector of circulation strengths for each panel\ndΓ: Tuple containing the derivative of the circulation strength with respect  to each of the freestream parameters\nxhat: (optional) direction in which trailing vortices are shed, defaults to [1, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"library/#Far-Field","page":"Library","title":"Far-Field","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"VortexLattice.TrefftzPanel\nVortexLattice.normal(panel::VortexLattice.TrefftzPanel)\nVortexLattice.trefftz_panels\nVortexLattice.panel_induced_drag\nVortexLattice.vortex_induced_drag","category":"page"},{"location":"library/#VortexLattice.TrefftzPanel","page":"Library","title":"VortexLattice.TrefftzPanel","text":"TrefftzPanel{TF}\n\nPanel in the Trefftz plane.\n\n\n\n\n\n","category":"type"},{"location":"library/#VortexLattice.normal-Tuple{VortexLattice.TrefftzPanel}","page":"Library","title":"VortexLattice.normal","text":"normal(panel::TrefftzPanel)\n\nReturn the normal vector of panel, including magnitude\n\n\n\n\n\n","category":"method"},{"location":"library/#VortexLattice.trefftz_panels","page":"Library","title":"VortexLattice.trefftz_panels","text":"trefftz_panels(surface[s], freestream, Γ)\n\nConstructs a set of panels for Trefftz plane calculations\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.panel_induced_drag","page":"Library","title":"VortexLattice.panel_induced_drag","text":"panel_induced_drag(receiving::TrefftzPanel, sending::TrefftzPanel, same_id, symmetric)\n\nInduced drag on receiving panel induced by sending panel.\n\n\n\n\n\n","category":"function"},{"location":"library/#VortexLattice.vortex_induced_drag","page":"Library","title":"VortexLattice.vortex_induced_drag","text":"vortex_induced_drag(rj, Γj, ri, Γi, nhati)\n\nReturn induced drag from vortex j induced on panel i\n\n\n\n\n\n","category":"function"},{"location":"library/#Index","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples show how to use VortexLattice for various geometries, flow conditions, and analyses.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = [\"examples.md\"]\nDepth = 3","category":"page"},{"location":"examples/#Symmetric-Simple-Wing","page":"Examples","title":"Symmetric Simple Wing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using VortexLattice\n\n# geometry\nxle = [0.0, 0.4]\nyle = [0.0, 7.5]\nzle = [0.0, 0.0]\nchord = [2.2, 1.8]\ntheta = [2.0*pi/180, 2.0*pi/180]\nphi = [0.0, 0.0]\n\n# discretization parameters\nns = 12\nnc = 6\nspacing_s = Uniform()\nspacing_c = Uniform()\n\n# reference parameters\nSref = 30.0\ncref = 2.0\nbref = 15.0\nrref = [0.50, 0.0, 0.0]\nref = Reference(Sref, cref, bref, rref)\n\n# freestream parameters\nalpha = 1.0*pi/180\nbeta = 0.0\nOmega = [0.0; 0.0; 0.0]\nvother = nothing\nfs = Freestream(alpha, beta, Omega, vother)\n\n# construct surface\nsurface = wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc; spacing_s=spacing_s, spacing_c=spacing_c)\n\n# declare symmetry\nsymmetric = true\n\n# get circulation\nAIC = influence_coefficients(surface, symmetric)\nb = normal_velocity(surface, ref, fs)\nΓ = circulation(AIC, b)\n\n# perform near-field analysis\nCF, CM, panelprops = near_field_forces(surface, ref, fs, symmetric, Γ; frame=Wind())\n\n# perform far-field analysis\nCDiff = far_field_drag(surface, ref, fs, symmetric, Γ)\n\nCD, CY, CL = CF\nCl, Cm, Cn = CM\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Mirrored-Simple-Wing","page":"Examples","title":"Mirrored Simple Wing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using VortexLattice\n\n# geometry\nxle = [0.0, 0.4]\nyle = [0.0, 7.5]\nzle = [0.0, 0.0]\nchord = [2.2, 1.8]\ntheta = [2.0*pi/180, 2.0*pi/180]\nphi = [0.0, 0.0]\n\n# discretization parameters\nns = 12\nnc = 6\nspacing_s = Uniform()\nspacing_c = Uniform()\n\n# reference parameters\nSref = 30.0\ncref = 2.0\nbref = 15.0\nrref = [0.50, 0.0, 0.0]\nref = Reference(Sref, cref, bref, rref)\n\n# freestream parameters\nalpha = 1.0*pi/180\nbeta = 0.0\nOmega = [0.0; 0.0; 0.0]\nvother = nothing\nfs = Freestream(alpha, beta, Omega, vother)\n\n# construct surface (and mirror geometry)\nsurface = wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc; spacing_s=spacing_s, spacing_c=spacing_c, mirror=true)\n\n# declare symmetry\nsymmetric = false\n\n# get circulation\nAIC = influence_coefficients(surface, symmetric)\nb = normal_velocity(surface, ref, fs)\nΓ = circulation(AIC, b)\n\n# perform near-field analysis\nCF, CM, panelprops = near_field_forces(surface, ref, fs, symmetric, Γ; frame=Wind())\n\n# perform far-field analysis\nCDiff = far_field_drag(surface, ref, fs, symmetric, Γ)\n\nCD, CY, CL = CF\nCl, Cm, Cn = CM\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Simple-Wing-with-Dihedral","page":"Examples","title":"Simple Wing with Dihedral","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using VortexLattice\n\nxle = [0.0, 0.4]\nyle = [0.0, 7.5]\nzle = [0.0, 3.0]\nchord = [2.2, 1.8]\ntheta = [2.0*pi/180, 2.0*pi/180]\nphi = [0.0, 0.0]\nns = 12\nnc = 6\nspacing_s = Uniform()\nspacing_c = Uniform()\nmirror = false\nsymmetric = true\n\nSref = 30.0\ncref = 2.0\nbref = 15.0\nrref = [0.50, 0.0, 0.0]\nref = Reference(Sref, cref, bref, rref)\n\nalpha = 1.0*pi/180\nbeta = 0.0\nOmega = [0.0; 0.0; 0.0]\nvother = nothing\nfs = Freestream(alpha, beta, Omega, vother)\n\n# horseshoe vortices\nsurface = wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc;\n    mirror=mirror, spacing_s=spacing_s, spacing_c=spacing_c)\n\nAIC = influence_coefficients(surface, symmetric)\nb = normal_velocity(surface, ref, fs)\nΓ = circulation(AIC, b)\nCF, CM, panelprops = near_field_forces(surface, ref, fs, symmetric, Γ; frame=Stability())\nCDiff = far_field_drag(surface, ref, fs, symmetric, Γ)\n\nCD, CY, CL = CF\nCl, Cm, Cn = CM\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Wing-and-Tail","page":"Examples","title":"Wing and Tail","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using VortexLattice\n\n# wing\nxle = [0.0, 0.2]\nyle = [0.0, 5.0]\nzle = [0.0, 1.0]\nchord = [1.0, 0.6]\ntheta = [2.0*pi/180, 2.0*pi/180]\nphi = [0.0, 0.0]\nns = 12\nnc = 6\nspacing_s = Uniform()\nspacing_c = Uniform()\nmirror = false\n\n# horizontal stabilizer\nxle_h = [0.0, 0.14]\nyle_h = [0.0, 1.25]\nzle_h = [0.0, 0.0]\nchord_h = [0.7, 0.42]\ntheta_h = [0.0, 0.0]\nphi_h = [0.0, 0.0]\nns_h = 6\nnc_h = 3\nspacing_s_h = Uniform()\nspacing_c_h = Uniform()\nmirror_h = false\n\n# vertical stabilizer\nxle_v = [0.0, 0.14]\nyle_v = [0.0, 0.0]\nzle_v = [0.0, 1.0]\nchord_v = [0.7, 0.42]\ntheta_v = [0.0, 0.0]\nphi_v = [0.0, 0.0]\nns_v = 5\nnc_v = 3\nspacing_s_v = Uniform()\nspacing_c_v = Uniform()\nmirror_v = false\n\nSref = 9.0\ncref = 0.9\nbref = 10.0\nrref = [0.5, 0.0, 0.0]\nref = Reference(Sref, cref, bref, rref)\n\nalpha = 5.0*pi/180\nbeta = 0.0\nOmega = [0.0; 0.0; 0.0]\nvother = nothing\nfs = Freestream(alpha, beta, Omega, vother)\n\nsymmetric = true\n\n# horseshoe vortices\nwing = wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc;\n    mirror=mirror, spacing_s=spacing_s, spacing_c=spacing_c)\n\nhtail = wing_to_horseshoe_vortices(xle_h, yle_h, zle_h, chord_h, theta_h, phi_h, ns_h, nc_h;\n    mirror=mirror_h, spacing_s=spacing_s_h, spacing_c=spacing_c_h)\ntranslate!(htail, [4.0, 0.0, 0.0])\n\nvtail = wing_to_horseshoe_vortices(xle_v, yle_v, zle_v, chord_v, theta_v, phi_v, ns_v, nc_v;\n    mirror=mirror_v, spacing_s=spacing_s_v, spacing_c=spacing_c_v)\ntranslate!(vtail, [4.0, 0.0, 0.0])\n\nsurfaces = [wing, htail, vtail]\nsurface_id = [1, 2, 3]\n\nAIC = influence_coefficients(surfaces, surface_id, symmetric)\nb = normal_velocity(surfaces, ref, fs)\nΓ = circulation(AIC, b)\nCF, CM, panelprops = near_field_forces(surfaces, surface_id, ref, fs, symmetric, Γ; frame=Stability())\nCDiff = far_field_drag(surfaces, ref, fs, symmetric, Γ)\n\nCD, CY, CL = CF\nCl, Cm, Cn = CM\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Body/Stability-Derivatives","page":"Examples","title":"Body/Stability Derivatives","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using VortexLattice\n\nxle = [0.0, 0.4]\nyle = [0.0, 7.5]\nzle = [0.0, 0.0]\nchord = [2.2, 1.8]\ntheta = [2.0*pi/180, 2.0*pi/180]\nphi = [0.0, 0.0]\n\nns = 12\nnc = 6\nspacing_s = Uniform()\nspacing_c = Uniform()\n\nmirror = true\nsymmetric = false\n\nSref = 30.0\ncref = 2.0\nbref = 15.0\nrref = [0.50, 0.0, 0.0]\nref = Reference(Sref, cref, bref, rref)\n\nalpha = 1.0*pi/180\nbeta = 0.0\nOmega = [0.0; 0.0; 0.0]\nvother = nothing\nfs = Freestream(alpha, beta, Omega, vother)\n\n# horseshoe vortices\nsurface = wing_to_horseshoe_vortices(xle, yle, zle, chord, theta, phi, ns, nc;\n    mirror=mirror, spacing_s=spacing_s, spacing_c=spacing_c)\n\nAIC = influence_coefficients(surface, symmetric)\n\ndCFb, dCMb = body_derivatives(surface, ref, fs, symmetric, AIC)\n\nCXu, CYu, CZu = dCFb.u\nCXv, CYv, CZv = dCFb.v\nCXw, CYw, CZw = dCFb.w\nCXp, CYp, CZp = dCFb.p\nCXq, CYq, CZq = dCFb.q\nCXr, CYr, CZr = dCFb.r\n\nClu, Cmu, Cnu = dCMb.u\nClv, Cmv, Cnv = dCMb.v\nClw, Cmw, Cnw = dCMb.w\nClp_b, Cmp_b, Cnp_b = dCMb.p\nClq_b, Cmq_b, Cnq_b = dCMb.q\nClr_b, Cmr_b, Cnr_b = dCMb.r\n\ndCFs, dCMs = stability_derivatives(surface, ref, fs, symmetric, AIC)\n\nCDa, CYa, CLa = dCFs.alpha\nCDb, CYb, CLb = dCFs.beta\nCDp, CYp, CLp = dCFs.p\nCDq, CYq, CLq = dCFs.q\nCDr, CYr, CLr = dCFs.r\n\nCla, Cma, Cna = dCMs.alpha\nClb, Cmb, Cnb = dCMs.beta\nClp_s, Cmp_s, Cnp_s = dCMs.p\nClq_s, Cmq_s, Cnq_s = dCMs.q\nClr_s, Cmr_s, Cnr_s = dCMs.r\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"#VortexLattice","page":"Home","title":"VortexLattice","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Comprehensive Julia implementation of the Vortex Lattice Method","category":"page"},{"location":"","page":"Home","title":"Home","text":"Authors: Taylor McDonnell and Andrew Ning","category":"page"},{"location":"","page":"Home","title":"Home","text":"VortexLattice is a comprehensive pure-Julia implementation of the vortex lattice method.  It is designed to be fast, accurate (within theoretical limitations), easy to use, and applicable to arbitrary geometries and velocity fields.  It has been extensively verified against results generated using Mark Drela's AVL, but has also been enhanced to incorporate features and modeling capabilities not present in AVL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Custom vortex lattice panels\nHorseshoe vortices (see Flight Vehicle Aerodynamics by Mark Drela[1])\nVortex rings (see Low-Speed Aerodynamics by Katz and Plotkin[2])\nOptional finite-core model\nConvenient geometry generation\nFrom pre-existing grid\nFrom lifting surface parameters\nSymmetric geometries\nMultiple discretization schemes\nUniform\nSine\nCosine\nGeneral freestream description\nFreestream flow angles\nAircraft rotation components\nAdditional velocity\nMultiple analyses\nNear field forces in body, stability, or wind Axes\nFar field drag\nBody and stability derivatives\nGeometry visualization using WriteVTK\nExtensively verified against computational results generated using AVL.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Enter the package manager by typing ] and then run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/byuflowlab/VortexLattice.jl","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This code has been optimized to be highly performant, primarily by maintaining type stability and minimizing allocations.  It should easily outperform other vortex lattice method codes written in other higher level languages.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the documentation","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1] Drela, M. Flight Vehicle Aerodynamics. MIT Press, 2014.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2] Katz, J., and Plotkin A. Low-Speed Aerodynamics. Cambridge University Press, 2001.","category":"page"}]
}
